{
  "hash": "a3e8c709f6cf996ea40640acd0cb8884",
  "result": {
    "markdown": "title: \"Title3\" author: \"Sumendar\" date: \"2023-03-22\" categories: \\[news, code, analysis\\] format: html: code-fold: true code-summary: \"Show the code\" jupyter: python3\n\n## Basics\n\n### `print()` function:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nprint('hello world')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello world\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(\"welcome to data science\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome to data science\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n**Printing Multiple Pieces of Data**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n?print\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(\"hello\", 'world')# this will print the value to the output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello world\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(50, 1000, 3.142, \"Hello World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50 1000 3.142 Hello World\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(\"hello world\" + \"!\") #concatenatiing two strings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello world!\n```\n:::\n:::\n\n\nBy default, each `print` statement prints text in a new line. If we want multiple `print` statements to print in the same line, we can use the following code:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint() # in jupyter: shift+tab(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(\"Hello\")\nprint(\"World\")\n######################\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nWorld\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint(\"Hello\", end=\"\")\nprint(\"World\")\n######################\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelloWorld\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(\"Hello\", end=\" \")\nprint(\"World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\";\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome_to_python;\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\";\")  #instead of new line we have been added ;\nprint(\"data science\") # its by default new line will be the end of this code line\nprint(\"technology\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n_to_python;data science\ntechnology\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\"$\")\nprint(\"data science\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome_to_python$data science\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\"\\n\") # end with new line(by default)\nprint(\"data science\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome_to_python\ndata science\n```\n:::\n:::\n\n\n### comment with `#` and `'''` symbols:\n\n**Single Line Comment:**\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n    # this statement will print the value inside in it\n    print(\"welcome to data science\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwelcome to data science\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# hello\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n'''hello'''\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n'hello'\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n'''\nthis statement will print the factorial of the number we\ngave from math module\n'''\nimport math # module\nmath.factorial(5) # printed the factorial of 5 here\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n120\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n'''\nthis statement will print the statement inside in it\nwe can use print function and write sentense or values\ninside within the unction\nOther Statement\n'''\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'\\nthis statement will print the statement inside in it\\nwe can use print function and write sentense or values\\ninside within the unction\\nOther Statement\\n'\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nprint('''\nthis statement will print the statement inside in it\nwe can use print function and write sentense or values\ninside within the unction\nOther Statement\n''')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nthis statement will print the statement inside in it\nwe can use print function and write sentense or values\ninside within the unction\nOther Statement\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Notebook0_files"
    ],
    "filters": [],
    "includes": {}
  }
}