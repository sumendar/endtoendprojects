[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "This blog has been set up for upcoming end-to-end data science, and machine learning projects with AI-related tools",
    "section": "",
    "text": "SQL Server Coding (Direct copied from Azure Data Studion After executing output got there then pasted here)\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nMySQL Check (Sample Notebook for preview ipynb)\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nMySQL Check (Sample Notebook for preview md: Its a file from jupytext synched Myst markdow with same name ipynb notebook)\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code (created here within qmd file edited updated within this file only)\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 15, 2022\n\n\nSumendar\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 12, 2022\n\n\nSumendar\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/1-SQLServerNotebook.html",
    "href": "posts/post-with-code/1-SQLServerNotebook.html",
    "title": "End to End Projects",
    "section": "",
    "text": "USE salesdb;\n\nCommands completed successfully.\n\n\nTotal execution time: 00:00:00.025\n\n\n\nSELECT TOP 15 * FROM Customers;\n\n(15 rows affected)\n\n\nTotal execution time: 00:00:00.127\n\n\n\nCustomerIDFirstNameMiddleInitialLastName1AaronNULLAlexander2AaronNULLBryant3AaronNULLButler4AaronNULLChen5AaronNULLColeman6AaronNULLCon7AaronNULLEdwards8AaronNULLFlores9AaronNULLFoster10AaronNULLGonzales11AaronNULLGriffin12AaronNULLHenderson13AaronNULLHernandez14AaronNULLHill15AaronNULLJai\n\n\n\n--https://docs.microsoft.com/en-us/sql/azure-data-studio/notebooks/notebooks-sql-kernel\n--SELECT distinct Title FROM Person.Person\n--SELECT distinct Type, Category FROM Sales.SpecialOffer\n\n(7 rows affected)\n\n\n(8 rows affected)\n\n\nTotal execution time: 00:00:01.895\n\n\n\nTitleSr.Mrs.NULLSra.Ms.MsMr.\n\n\n\nTypeCategoryDiscontinued ProductResellerExcess InventoryCustomerExcess InventoryResellerNew ProductResellerNo DiscountNo DiscountSeasonal DiscountCustomerSeasonal DiscountResellerVolume DiscountReseller\n\n\n\nSELECT distinct size, color from Production.Product\n\n(68 rows affected)\n\n\nTotal execution time: 00:00:00.021\n\n\n\nsizecolorNULLNULLNULLBlackNULLBlueNULLGreyNULLMultiNULLRedNULLSilverNULLSilver/Black38Black38Silver38Yellow40Black40Silver40Yellow42Black42Silver42Yellow44Black44Blue44Red44Silver44Yellow46Black46Blue46Silver46Yellow48Black48Red48Silver48Yellow50Blue50Yellow52Black52Red52Silver54Blue54Yellow56Red58Black58Blue58Red58Yellow60Black60Blue60Red60Yellow62Black62Blue62Red62Yellow70SilverLBlackLBlueLMultiLWhiteLYellowMBlackMBlueMMultiMWhiteMYellowSBlackSBlueSMultiSYellowXLBlackXLMultiXLYellow\n\n\n\nSQL Server Coding (Direct copied from Azure Data Studion After executing output got there then pasted here)\n\n\nData Types\n\n\n\nImgur\n\n\n\n\nDate Datatype\n\nDeclare @myDate date = '02-02-2016'\nSelect @myDate as MyDate\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.011\n\n\n\nMyDate2016-02-02\n\n\n\nDeclare @myDateTime datetime = '02-02-2016'\nSelect @myDateTime as MyDateTime\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.006\n\n\n\nMyDateTime2016-02-02 00:00:00.000\n\n\n\nDeclare @myTime time = '16:25:42.1214'\nSelect @myTime as MyTime\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.039\n\n\n\nMyTime16:25:42.1214000\n\n\n\nDeclare @myTime time(2) = '16:25:42.1214'\nSelect @myTime as MyTime\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.018\n\n\n\nMyTime16:25:42.1200000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharecter Datatype\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Character\nDECLARE @myChar CHAR(20) = 'PDI'\nSELECT @myChar AS Char, DATALENGTH (@myChar) as Datalength, LEN(@myChar) AS Len\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.040\n\n\n\nCharDatalengthLenEdvancer            208\n\n\n\n-- Varchar\nDECLARE @myChar VARCHAR(20) = 'PDI Lmtd'\nSELECT @myChar AS Varchar, DATALENGTH (@myChar) as Datalength, LEN(@myChar) AS Len\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.014\n\n\n\nVarcharDatalengthLenEdvancer88\n\n\n\n\nNumeric Datatype\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDECLARE @num NUMERIC(7,2) = 12376.7854\nSELECT @num as NumericData\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.024\n\n\n\nNumericData12376.79\n\n\n\nDECLARE @SmallInt SMALLINT = 12376.7854\nSELECT @SmallInt AS SmallIntData\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.023\n\n\n\nSmallIntData12376\n\n\n\n-- DECLARE @SmallInt SMALLINT = -32769 \n-- SELECT @SmallInt AS SmallIntData\n-----------------Errors when we un comment above and run codes\n-- if we give more/less than \n--affordable range it will gives an error\n--Msg 220, Level 16, State 1, Line 1\n--Arithmetic overflow error for data type smallint, value = -32769.\n\nCommands completed successfully.\n\n\nTotal execution time: 00:00:00.001\n\n\n\nDECLARE @TinyInt SMALLINT = 254\nSELECT @TinyInt AS TinyIntData\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.009\n\n\n\nTinyIntData254\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--Float\nDECLARE @float FLOAT(10) = 12376.7854\nSELECT @float as FLOAT\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.012\n\n\n\nFLOAT12376.785\n\n\n\n--Data type precedence\nDECLARE @float1 FLOAT(10), @int INT\nSET @float1 = 12376.7854\nSET @int = 570\nSELECT @float1 + @int as Result\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.007\n\n\n\nResult12946.785\n\n\n\n\nFilter the data using where\n\nUSE AdventureWorks2014;\nSELECT TOP 10 * FROM AdventureWorks2014.HumanResources.Employee WHERE SickLeaveHours > 50;\n\n(10 rows affected)\n\n\nTotal execution time: 00:00:00.195\n\n\n\nBusinessEntityIDNationalIDNumberLoginIDOrganizationNodeOrganizationLevelJobTitleBirthDateMaritalStatusGenderHireDateSalariedFlagVacationHoursSickLeaveHoursCurrentFlagrowguidModifiedDate1295847284adventure-works\\ken0NULLNULLChief Executive Officer1969-01-29SM2009-01-14199691f01251e5-96a3-448d-981e-0f99d789110d2014-06-30 00:00:00.0004112457891adventure-works\\rob00x5AD63Senior Tool Designer1974-12-23SM2007-12-0504880159747955-87b8-443f-8ed4-f8ad3afdf3a92014-06-30 00:00:00.0008811994146adventure-works\\diane10x5AE1584Research and Development Engineer1986-06-05SF2008-12-2916251131112635-663b-4018-b4a2-a685c0bf48a42014-06-30 00:00:00.0009658797903adventure-works\\gigi00x5AE1684Research and Development Engineer1979-01-21MF2009-01-1616351150b6cdc6-7570-47ef-9570-48a64b5f2ecf2014-06-30 00:00:00.00010879342154adventure-works\\michael60x5AE1784Research and Development Manager1984-11-30MM2009-05-03116641eaa43680-5571-40cb-ab1a-3bf68f04459e2014-06-30 00:00:00.00025519899904adventure-works\\james10x781Vice President of Production1983-01-07SM2009-02-03164521d7314f24-2af1-429c-9bbb-4038f45f3e6c2014-06-30 00:00:00.00027446466105adventure-works\\jo00x7AD63Production Supervisor - WC601956-10-08SF2008-02-2708060183ffaac6-b895-481f-b897-14f965d4da472014-06-30 00:00:00.00040309738752adventure-works\\jolynn00x7ADA3Production Supervisor - WC601956-01-16SF2007-12-260826112cc71b96-f421-485e-9832-8723337749bb2014-06-30 00:00:00.0004733237992adventure-works\\andrew00x7ADE3Production Supervisor - WC101988-09-06SM2009-02-2206552108365b05-c143-4260-a93c-6b69418b19462014-06-30 00:00:00.00048690627818adventure-works\\ruth00x7ADEB04Production Technician - WC101956-06-04MF2008-01-060836113e3b6905-209e-442e-b8a8-9a0980241c6a2014-06-30 00:00:00.000\n\n\n\nSELECT TOP 10 * FROM Sales.CreditCard WHERE ExpYear = 2008;\n\n(10 rows affected)\n\n\nTotal execution time: 00:00:00.021\n\n\n\nCreditCardIDCardTypeCardNumberExpMonthExpYearModifiedDate10SuperiorCard33332126386493820082011-08-31 00:00:00.00011SuperiorCard333353525173631020082014-05-04 00:00:00.00012SuperiorCard33334316194519420082012-05-30 00:00:00.00015SuperiorCard333368660655991120082013-01-29 00:00:00.00017ColonialVoice77771220960729820082014-01-16 00:00:00.00026Distinguish555541958479981120082013-08-27 00:00:00.00027SuperiorCard333338373928251220082013-11-11 00:00:00.00031Vista111120401999861020082009-01-15 00:00:00.00038Distinguish55555420711099720082013-09-24 00:00:00.00040Distinguish55555841603354420082013-08-25 00:00:00.000\n\n\n\nUSE Training\n\nCommands completed successfully.\n\n\nTotal execution time: 00:00:00.001\n\n\n\n-- selecting products table\nSELECT * FROM products;\n\n(10 rows affected)\n\n\nTotal execution time: 00:00:00.010\n\n\n\nProductIDProductCodeProductDescriptioncolor1AR-5381Adjustable RaceBlack2BA-8327Bearing BallSilver3BE-2349BB Ball BearingGrey4BE-2908Headset Ball BearingsBlack5BL-2036BladeGrey6CA-5965LL CrankarmGrey7CA-6738ML CrankarmSilver8CA-7457HL CrankarmSilver9CB-2903Chainring BoltsSilver10CN-6137Chainring NutGrey\n\n\n\n-- selecting city table\nSELECT * FROM city;\n\n(12 rows affected)\n\n\nTotal execution time: 00:00:00.009\n\n\n\nCityIDCityCodeCityNamePopulationDensitysampleColumn1ADIAhmedabadHigh12BLRBangaloreHigh13CHDChandigarhLow14CHNChennaiHigh15DDNDehradunMedium16DELDelhiHigh17JPRJaipurMedium18KOLKolkataHigh19MUMMumbaiHigh110MYSMysoreLow111PDYPuducherryLow112RNCRanchiMedium1\n\n\n\nSELECT * from City;\n\n(12 rows affected)\n\n\nTotal execution time: 00:00:00.032\n\n\n\nCityIDCityCodeCityNamePopulationDensitysampleColumn1ADIAhmedabadHigh12BLRBangaloreHigh13CHDChandigarhLow14CHNChennaiHigh15DDNDehradunMedium16DELDelhiHigh17JPRJaipurMedium18KOLKolkataHigh19MUMMumbaiHigh110MYSMysoreLow111PDYPuducherryLow112RNCRanchiMedium1\n\n\n\nUse Training;\n\nCommands completed successfully.\n\n\nTotal execution time: 00:00:00.007\n\n\n\nSELECT * \nfrom City where populationDensity = 'High';\n\n(6 rows affected)\n\n\nTotal execution time: 00:00:00.050\n\n\n\nCityIDCityCodeCityNamePopulationDensitysampleColumn1ADIAhmedabadHigh12BLRBangaloreHigh14CHNChennaiHigh16DELDelhiHigh18KOLKolkataHigh19MUMMumbaiHigh1\n\n\n\nSELECT *\n  FROM City WHERE PopulationDensity = 'High'\n\n(6 rows affected)\n\n\nTotal execution time: 00:00:00.007\n\n\n\nCityIDCityCodeCityNamePopulationDensitysampleColumn1ADIAhmedabadHigh12BLRBangaloreHigh14CHNChennaiHigh16DELDelhiHigh18KOLKolkataHigh19MUMMumbaiHigh1\n\n\n\nSELECT\n  MIN([DATE_KEY]) AS [MIN_DATE],\n  MAX([DATE_KEY]) AS [MAX_DATE],\n  DATEDIFF(YEAR, MIN([DATE_KEY]), MAX([DATE_KEY])) [SPAN_IN_YEARS]\nFROM [EDW].[F_COLLISIONS]\n\n: Msg 208, Level 16, State 1, Line 1\nInvalid object name 'EDW.F_COLLISIONS'.\n\n\nTotal execution time: 00:00:00.032\n\n\n\nDECLARE @myDate date = '02-02-2016';\nSELECT @myDate as MyDate;\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.024\n\n\n\nMyDate2016-02-02\n\n\n\nDECLARE @myDate datetime = '02-02-2016';\nSELECT @myDate as MyDate;\n\n(1 row affected)\n\n\nTotal execution time: 00:00:00.072\n\n\n\nMyDate2016-02-02 00:00:00.000"
  },
  {
    "objectID": "posts/post-with-code/2-MySQLNotebook.html",
    "href": "posts/post-with-code/2-MySQLNotebook.html",
    "title": "End to End Projects",
    "section": "",
    "text": "MySQL Check (Sample Notebook for preview ipynb)\n\nA tutorial of SQL Basics Scripting.\n\n\ntoc: true\nbadges: true\ncomments: true\ncategories: [SQL]\n\n\n\nResources:\n\nhttps://www.educba.com/data-science/data-science-tutorials/mysql-tutorial/\n\nhttps://www.w3schools.com/mysql/default.asp\n\n\nUSE world;\nSELECT * from city limit 5;\n\n\n# LECTURE: Creating a Database - Part I here we are creating Sales Database\n\nCREATE DATABASE IF NOT EXISTS Sales;\n\nCREATE SCHEMA IF NOT EXISTS Sales;\n\n\nUSE Sales;\n\n\nCREATE TABLE sales\n(\n    purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    date_of_purchase DATE NOT NULL,\n    customer_id INT,\n    item_code VARCHAR(10) NOT NULL\n\n);"
  },
  {
    "objectID": "posts/post-with-code/2-MySQLNotebook1.html",
    "href": "posts/post-with-code/2-MySQLNotebook1.html",
    "title": "End to End Projects",
    "section": "",
    "text": "MySQL Check (Sample Notebook for preview md: Its a file from jupytext synched Myst markdow with same name ipynb notebook)\n\nA tutorial of SQL Basic Scripting.\n\n\ntoc: true\nbadges: true\ncomments: true\ncategories: [SQL]\n\n\n\nResources:\n\nhttps://www.educba.com/data-science/data-science-tutorials/mysql-tutorial/\n\nhttps://www.w3schools.com/mysql/default.asp\n\nUSE world;\nSELECT * from city limit 5;\nCommands completed successfully\n(5 row(s) affected)\nTotal execution time: 00:00:00.016\n\n\n\nID\nName\nCountryCode\nDistrict\nPopulation\n\n\n\n\n1\nKabul\nAFG\nKabol\n1780000\n\n\n2\nQandahar\nAFG\nQandahar\n237500\n\n\n3\nHerat\nAFG\nHerat\n186800\n\n\n4\nMazar-e-Sharif\nAFG\nBalkh\n127800\n\n\n5\nAmsterdam\nNLD\nNoord-Holland\n731200\n\n\n\n# LECTURE: Creating a Database - Part I\n\nCREATE DATABASE IF NOT EXISTS Sales;\n\nCREATE SCHEMA IF NOT EXISTS Sales;\nCommands completed successfully\nCommands completed successfully\nTotal execution time: 00:00:00.019\nUSE Sales;\nCommands completed successfully\nTotal execution time: 00:00:00.007\nCREATE TABLE sales\n(\n    purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    date_of_purchase DATE NOT NULL,\n    customer_id INT,\n    item_code VARCHAR(10) NOT NULL\n\n);\nTotal execution time: 00:00:00.012\nMYSQL:\n•   Data base concepts(Database, DBMS, RDMS)\n•   Installing MYSQL server and Workbench\n•   Select Command\n•   Distinct Keyword\n•   SQL is not Case Sensitive\n•   Where Clause\n•   Using Relational operators in where clause condition\n•   Using logical operators(AND, OR, NOT)\n•   Between Operator\n•   Order by Clause(ASC, DESC)\n•   Using Between operator with Text\n•   In operator\n•   Like operator and wildcard characters\n•   Aliases for table column names\n•   Limit keyword\n•   Breaking the lengthy SQL statement into Multiple lines\n•   My SQL Built in functions\n•   Arithmetic Operators\n•   Creating, viewing, describing, deleting and using databases\n•   Creating tables and inserting records into the table\n•   Data Types\n•   Null values, is null and is not null \n•   Delete statement\n•   Update statement and set keyword\n•   Rename statement and To keyword\n•   Alter statement ,Add ,Modify column ,rename and drop column\n•   Set auto commit\n•   Commit statement\n•   Rollback statement\n•   Truncate statement\n•   Single line and multiline comments\n•   Group by clause\n•   Having Clause\n•   Set operators(union, union all, intersect and minus operator)\n•   Joins(inner join, left join, right join, full join, self join)\n•   Sub Query(Types of sub query)\n•   Integrity Constraints(Not null, unique, primary and foreign key, check, default)\n•   Auto increment\n•   Insert into \n•   Case, when ,then and end keyword\n•   Delimiter\n•   Views\n•   Indexes\n•   Proceedures\n•   Any Doubts and Practice assignments on my SQL\nca you please explain definition and query for each step i have entered in the above points one by one till end point in MYSQL language for a novice person with simple queries and easy to understandable definition and small explanation to all above without excluding any?\nSure, I'd be happy to help! Here are the definitions and queries for each of the topics you've listed:\nDatabase Concepts:\nA database is an organized collection of data, while a DBMS (Database Management System) is software that manages the database. An RDBMS (Relational Database Management System) is a type of DBMS that stores data in tables that are related to each other by primary and foreign keys.\nInstalling MYSQL server and Workbench:\nTo install MYSQL server, you can download it from the official MYSQL website and follow the installation wizard. MYSQL Workbench is a graphical user interface for managing databases and can also be downloaded from the official MYSQL website.\nSelect Command:\nThe SELECT statement is used to retrieve data from a database. For example, to select all columns from a table called \"users\", you would use the following query:\nsql\nCopy code\nSELECT * FROM users;\nDistinct Keyword:\nThe DISTINCT keyword is used to select unique values from a column. For example, to select unique values from a column called \"city\" in a table called \"customers\", you would use the following query:\nsql\nCopy code\nSELECT DISTINCT city FROM customers;\nSQL is not Case Sensitive:\nSQL is not case sensitive, which means that keywords such as SELECT and select are equivalent.\nWhere Clause:\nThe WHERE clause is used to filter the results of a SELECT statement based on a specified condition. For example, to select all records from a table called \"orders\" where the \"status\" column is equal to \"shipped\", you would use the following query:\nsql\nCopy code\nSELECT * FROM orders WHERE status = 'shipped';\nUsing Relational Operators in Where Clause Condition:\nRelational operators such as =, <, >, <=, >=, and <> can be used in the WHERE clause to compare values. For example, to select all records from a table called \"products\" where the \"price\" column is greater than 10, you would use the following query:\nsql\nCopy code\nSELECT * FROM products WHERE price > 10;\nUsing Logical Operators (AND, OR, NOT):\nLogical operators such as AND, OR, and NOT can be used in the WHERE clause to combine conditions. For example, to select all records from a table called \"orders\" where the \"status\" column is equal to \"shipped\" and the \"total\" column is greater than 100, you would use the following query:\nsql\nCopy code\nSELECT * FROM orders WHERE status = 'shipped' AND total > 100;\nBetween Operator:\nThe BETWEEN operator is used in the WHERE clause to select values within a range. For example, to select all records from a table called \"sales\" where the \"date\" column is between January 1, 2022 and March 31, 2022, you would use the following query:\nsql\nCopy code\nSELECT * FROM sales WHERE date BETWEEN '2022-01-01' AND '2022-03-31';\nOrder by Clause (ASC, DESC):\nThe ORDER BY clause is used to sort the results of a SELECT statement in ascending (ASC) or descending (DESC) order. For example, to select all records from a table called \"customers\" and order them by last name in descending order, you would use the following query:\nsql\nCopy code\nSELECT * FROM customers ORDER BY last_name DESC;\nUsing Between Operator with Text:\nThe BETWEEN operator can also be used with text values. For example, to select all records from a table called \"employees\" where the \"name\" column is between \"Alice\" and \"Bob\", you would use the following query:\nsql\nCopy code\nSELECT * FROM employees WHERE name\nSumendar\nyou ended at 11th point, could you please continue with remaining steps from below for the same MySQL for a beginner to understand definition and queries of each below:\nIn operator\n•   Like operator and wildcard characters\n•   Aliases for table column names\n•   Limit keyword\n•   Breaking the lengthy SQL statement into Multiple lines\n•   My SQL Built in functions\n•   Arithmetic Operators\n•   Creating, viewing, describing, deleting and using databases\n•   Creating tables and inserting records into the table\n•   Data Types\n•   Null values, is null and is not null \n•   Delete statement\n•   Update statement and set keyword\n•   Rename statement and To keyword\n•   Alter statement ,Add ,Modify column ,rename and drop column\n•   Set auto commit\n•   Commit statement\n•   Rollback statement\n•   Truncate statement\n•   Single line and multiline comments\n•   Group by clause\n•   Having Clause\n•   Set operators(union, union all, intersect and minus operator)\n•   Joins(inner join, left join, right join, full join, self join)\n•   Sub Query(Types of sub query)\n•   Integrity Constraints(Not null, unique, primary and foreign key, check, default)\n•   Auto increment\n•   Insert into \n•   Case, when ,then and end keyword\n•   Delimiter\n•   Views\n•   Indexes\n•   Proceedures\n•   Any Doubts and Practice assignments on my SQL\nSure, I apologize for missing that. Here are explanations and examples for the remaining points:\nIn operator:\nThe IN operator allows you to specify multiple values in a WHERE clause. It is used to check whether a value is included in a list of values or not.\nExample: To retrieve the details of all employees whose department is either 'HR' or 'IT', we can use the following query:\nsql\nCopy code\nSELECT * FROM employees WHERE department IN ('HR', 'IT');\nLike operator and wildcard characters:\nThe LIKE operator is used to search for patterns in columns. It is often used with wildcard characters '%' and ''. The '%' character matches zero or more characters, while '' matches exactly one character.\nExample: To retrieve the details of all employees whose name starts with 'J', we can use the following query:\nsql\nCopy code\nSELECT * FROM employees WHERE name LIKE 'J%';\nAliases for table column names:\nAn alias is a temporary name assigned to a table or column. It can make queries more readable and understandable.\nExample: To retrieve the details of all employees along with their salaries, we can use the following query with aliases:\nvbnet\nCopy code\nSELECT name AS EmployeeName, salary AS EmployeeSalary FROM employees;\nLimit keyword:\nThe LIMIT keyword is used to limit the number of records returned in a query result.\nExample: To retrieve the details of the first five employees, we can use the following query:\nsql\nCopy code\nSELECT * FROM employees LIMIT 5;\nBreaking the lengthy SQL statement into Multiple lines:\nA lengthy SQL statement can be broken into multiple lines to improve its readability.\nExample: To retrieve the details of all employees whose age is greater than or equal to 25 and salary is greater than or equal to 50000, we can use the following query with line breaks:\nsql\nCopy code\nSELECT * \nFROM employees \nWHERE age >= 25 \nAND salary >= 50000;\nMy SQL Built-in functions:\nMySQL provides a number of built-in functions to manipulate data. Some common ones include COUNT(), SUM(), AVG(), MAX(), MIN(), etc.\nExample: To retrieve the total number of employees in the employees table, we can use the COUNT() function:\nsql\nCopy code\nSELECT COUNT(*) FROM employees;\nArithmetic Operators:\nMySQL supports arithmetic operators such as +, -, *, /, %.\nExample: To retrieve the details of all employees whose salary is more than twice their age, we can use the following query:\nsql\nCopy code\nSELECT * FROM employees WHERE salary > 2 * age;\nCreating, viewing, describing, deleting and using databases:\nA database is a collection of tables and other objects that are used to store and manage data. MySQL provides various commands to create, view, describe, delete and use databases.\nExample: To create a new database named 'mydatabase', we can use the following query:\nsql\nCopy code\nCREATE DATABASE mydatabase;\nCreating tables and inserting records into the table:\nA table is a collection of data that is organized in a specific format. MySQL provides commands to create tables and insert records into the tables.\nExample: To create a new table named 'employees' with columns 'name', 'age', 'department' and 'salary', we can use the following query:\nsql\nCopy code\nCREATE TABLE employees (\n    name VARCHAR(50),\n    age INT,\n    department VARCHAR(50),\n    salary DECIMAL(10,2)\n);\nTo insert a record into the employees table, we can use the following query:\nsql\nCopy code\nINSERT INTO employees (name, age, department, salary) VALUES ('John Doe', 30, 'IT', 60000);\nData Types:\nData types specify the type of data\nSumendar\nyou have been missed remaining can you explain below steps till last point in same mysql with easy definition and queries \nNull values, is null and is not null \n•   Delete statement\n•   Update statement and set keyword\n•   Rename statement and To keyword\n•   Alter statement ,Add ,Modify column ,rename and drop column\n•   Set auto commit\n•   Commit statement\n•   Rollback statement\n•   Truncate statement\n•   Single line and multiline comments\n•   Group by clause\n•   Having Clause\n•   Set operators(union, union all, intersect and minus operator)\n•   Joins(inner join, left join, right join, full join, self join)\n•   Sub Query(Types of sub query)\n•   Integrity Constraints(Not null, unique, primary and foreign key, check, default)\n•   Auto increment\n•   Insert into \n•   Case, when ,then and end keyword\n•   Delimiter\n•   Views\n•   Indexes\n•   Proceedures\n•   Any Doubts and Practice assignments on my SQL\nSure, I apologize for the mistake earlier. I will continue from where I left off:\nNull values, is null and is not null:\nIn SQL, a null value represents a missing or unknown value. The IS NULL and IS NOT NULL operators are used to check for null values in a column.\nTo select all rows where a column is null, you can use the IS NULL operator like this:\nsql\nCopy code\nSELECT * FROM my_table WHERE my_column IS NULL;\nTo select all rows where a column is not null, you can use the IS NOT NULL operator like this:\nsql\nCopy code\nSELECT * FROM my_table WHERE my_column IS NOT NULL;\nDelete statement:\nThe DELETE statement is used to delete one or more rows from a table. The basic syntax for the DELETE statement is as follows:\nsql\nCopy code\nDELETE FROM table_name WHERE condition;\nFor example, to delete all rows from a table where the age column is greater than 30, you would use the following statement:\nsql\nCopy code\nDELETE FROM my_table WHERE age > 30;\nUpdate statement and set keyword:\nThe UPDATE statement is used to modify one or more columns in one or more rows in a table. The basic syntax for the UPDATE statement is as follows:\nsql\nCopy code\nUPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;\nFor example, to update the age column to 30 for all rows where the name column is 'John', you would use the following statement:\nsql\nCopy code\nUPDATE my_table SET age = 30 WHERE name = 'John';\nRename statement and To keyword:\nThe RENAME statement is used to rename a table or a column in a table. The basic syntax for the RENAME statement is as follows:\ncss\nCopy code\nALTER TABLE table_name RENAME TO new_table_name;\nFor example, to rename a table called old_table to new_table, you would use the following statement:\ncss\nCopy code\nALTER TABLE old_table RENAME TO new_table;\nTo rename a column in a table, you would use the following statement:\nsql\nCopy code\nALTER TABLE my_table RENAME COLUMN old_column_name TO new_column_name;\nAlter statement, Add, Modify column, rename and drop column:\nThe ALTER statement is used to modify the structure of a table, such as adding or modifying columns, renaming columns, or dropping columns.\nTo add a new column to a table, you would use the following statement:\nsql\nCopy code\nALTER TABLE my_table ADD new_column_name data_type;\nTo modify the data type of an existing column, you would use the following statement:\nsql\nCopy code\nALTER TABLE my_table MODIFY column_name new_data_type;\nTo rename a column in a table, you would use the following statement:\nsql\nCopy code\nALTER TABLE my_table RENAME COLUMN old_column_name TO new_column_name;\nTo drop a column from a table, you would use the following statement:\nsql\nCopy code\nALTER TABLE my_table DROP column_name;\nSet auto commit:\nAuto-commit is a feature in MySQL that automatically commits the current transaction after each SQL statement. To enable auto-commit, you can use the following statement:\njava\nCopy code\nSET autocommit = 1;\nTo disable auto-commit, you can use the following statement:\njava\nCopy code\nSET autocommit = 0;\nCommit statement:\nThe COMMIT statement is used to permanently save the changes made to a database.\nsql\nCopy code\nCOMMIT;\nRollback statement:\nThe ROLLBACK statement is used to undo changes made to a database in the current transaction.\nsql\nCopy code\nROLLBACK;\nTruncate statement:\nThe TRUNCATE statement is used to remove all\nSumendar\ncan you complete remaining till end of all points below?\n•   Single line and multiline comments\n•   Group by clause\n•   Having Clause\n•   Set operators(union, union all, intersect and minus operator)\n•   Joins(inner join, left join, right join, full join, self join)\n•   Sub Query(Types of sub query)\n•   Integrity Constraints(Not null, unique, primary and foreign key, check, default)\n•   Auto increment\n•   Insert into \n•   Case, when ,then and end keyword\n•   Delimiter\n•   Views\n•   Indexes\n•   Proceedures\nSure, I can continue with the remaining points. Here are the explanations and examples for each:\nSingle Line and Multiline Comments:\nComments in SQL are used to write a description or explanation of the code, which makes it easier for others to understand the code. There are two types of comments in SQL: single-line comments and multiline comments.\nSingle-line comments start with two hyphens (--). Anything that follows after the double hyphen is ignored by the SQL engine. For example:\nsql\nCopy code\n-- This is a single-line comment\nSELECT * FROM mytable;\nMultiline comments start with a forward-slash and an asterisk (/) and end with an asterisk and a forward-slash (/). Anything that is enclosed between these two characters is ignored by the SQL engine. For example:\nsql\nCopy code\n/*\nThis is a multiline comment.\nIt can span multiple lines.\n*/\nSELECT * FROM mytable;\nGroup By Clause:\nThe GROUP BY clause is used with aggregate functions like SUM, COUNT, MAX, MIN, and AVG to group the result-set by one or more columns. This clause is used in a SELECT statement and is typically used to summarize data by grouping related records together. For example:\nsql\nCopy code\nSELECT department, SUM(salary) FROM employees GROUP BY department;\nIn this example, we are selecting the department and the total salary of all employees in each department. The GROUP BY clause groups the result by department.\nHaving Clause:\nThe HAVING clause is used to filter the results of a GROUP BY clause. It allows you to specify a condition that must be met for a group of records to be included in the result. For example:\nsql\nCopy code\nSELECT department, SUM(salary) FROM employees GROUP BY department HAVING SUM(salary) > 100000;\nIn this example, we are selecting the department and the total salary of all employees in each department. The HAVING clause filters the results to only show departments with a total salary greater than 100000.\nSet Operators (UNION, UNION ALL, INTERSECT, and MINUS):\nSet operators are used to combine the results of two or more SELECT statements. There are four set operators in SQL: UNION, UNION ALL, INTERSECT, and MINUS.\nUNION: combines the results of two SELECT statements and removes duplicate rows.\nUNION ALL: combines the results of two SELECT statements and includes all rows, including duplicates.\nINTERSECT: returns only the rows that are common to the results of two SELECT statements.\nMINUS: returns the rows from the first SELECT statement that are not in the second SELECT statement.\nFor example:\nsql\nCopy code\nSELECT column1 FROM table1 UNION SELECT column1 FROM table2;\nThis example combines the results of two SELECT statements that both select column1 from two different tables.\nJoins (INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, SELF JOIN):\nJoins are used to combine rows from two or more tables based on a related column between them. There are different types of joins in SQL, including:\nINNER JOIN: returns only the matching rows from both tables.\nLEFT JOIN: returns all the rows from the left table and matching rows from the right table.\nRIGHT JOIN: returns all the rows from the right table and matching rows from the left table.\nFULL JOIN: returns all the rows from both tables, including any non-matching rows.\nSELF JOIN: a join in which a table is joined with itself.\nFor example:\nsql\nCopy code\nSELECT orders.order_id, customers.customer_name FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id;\nThis example selects the order ID and customer name from the orders and customers tables, where the customer ID in the\nSumendar\ncan you please conclude remaining below as too till end in the same way?\nSub Query(Types of sub query)\n•   Integrity Constraints(Not null, unique, primary and foreign key, check, default)\n•   Auto increment\n•   Insert into \n•   Case, when ,then and end keyword\n•   Delimiter\n•   Views\n•   Indexes\n•   Proceedures\nSub Query(Types of subquery):\nA subquery, also known as an inner query, is a query that is nested inside another query. It is used to retrieve data that will be used as part of the criteria in the main query. There are two types of subqueries:\nSingle-row subquery: This type of subquery is used to retrieve a single value, which is used as part of the criteria in the main query.\nExample:\nSELECT *\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees);\nIn this example, the subquery retrieves the average salary of all employees, which is then used as part of the criteria in the main query to retrieve all employees with a salary greater than the average.\nMultiple-row subquery: This type of subquery is used to retrieve multiple rows, which are then used as part of the criteria in the main query.\nExample:\nSELECT *\nFROM employees\nWHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1700);\nIn this example, the subquery retrieves all department IDs from the departments table that have a location ID of 1700, which is then used as part of the criteria in the main query to retrieve all employees who work in those departments.\nIntegrity Constraints(Not null, unique, primary and foreign key, check, default):\nIntegrity constraints are used to ensure data accuracy and consistency in the database. They are rules that must be followed by the data in the database.\nNOT NULL: This constraint ensures that a column cannot have a null value.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nname VARCHAR(50) NOT NULL,\nage INT NOT NULL\n);\nUNIQUE: This constraint ensures that each value in a column is unique.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nemail VARCHAR(50) UNIQUE\n);\nPRIMARY KEY: This constraint ensures that each row in a table is uniquely identified by a specific column or columns.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nname VARCHAR(50),\nage INT\n);\nFOREIGN KEY: This constraint ensures that the values in a column of one table match the values in a column of another table.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nname VARCHAR(50),\ndepartment_id INT,\nFOREIGN KEY (department_id) REFERENCES departments(id)\n);\nCHECK: This constraint ensures that the values in a column meet a specific condition.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nname VARCHAR(50),\nage INT,\nCONSTRAINT age_check CHECK (age >= 18)\n);\nDEFAULT: This constraint sets a default value for a column if no value is specified.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY,\nname VARCHAR(50),\nage INT DEFAULT 18\n);\nAuto Increment:\nAuto increment is a feature that automatically increments the value of a column by 1 each time a new row is inserted into a table. It is commonly used for primary key columns to ensure that each row has a unique identifier.\nExample:\nCREATE TABLE employees (\nid INT PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR(50),\nage INT\n);\nInsert into:\nThe INSERT INTO statement is used to insert new rows into a table.\nExample:\nINSERT INTO employees (name, age) VALUES ('John', 25);\nThis statement inserts a new row into the employees table with the values 'John' and 25 in the name and age columns, respectively.\nCase, When, Then, and End Keyword:\nThe CASE statement is used to conditionally execute a set of statements based on a specific condition. It has the following syntax:\nCASE\nWHEN condition1 THEN"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code (created here within qmd file edited updated within this file only)",
    "section": "",
    "text": "This is a post with executable code check\n\nknitr::kable(\n  mtcars[1:6, 1:10]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\n\nknitr::kable(\n  airquality[1:6, 1:6]\n)\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n41\n190\n7.4\n67\n5\n1\n\n\n36\n118\n8.0\n72\n5\n2\n\n\n12\n149\n12.6\n74\n5\n3\n\n\n18\n313\n11.5\n62\n5\n4\n\n\nNA\nNA\n14.3\n56\n5\n5\n\n\n28\nNA\n14.9\n66\n5\n6\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 37 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 37 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nSQL code in RStudio(https://posit.co/blog/working-with-databases-and-sql-in-rstudio/ and https://irene.rbind.io/post/using-sql-in-rstudio/ and https://www.r-bloggers.com/2022/02/working-with-databases-and-sql-in-rstudio/ and https://statisticsglobe.com/run-sql-query-r):\n\n# Install these packages if you have not already\n# install.packages(c('DBI', 'RPostgres'))\nlibrary(DBI)\nlibrary(RPostgres)\n\n\ncon <- DBI::dbConnect(\n  RPostgres::Postgres(),\n  dbname = 'tutorialdb',\n  host = 'localhost',\n  port = 5432,\n  user = 'postgres',\n  password = 'sumendar' # insert your password here\n)\n\n\nDBI::dbGetQuery(con, 'SELECT customer_id, name, location, email FROM customers LIMIT 3')\n\n  customer_id    name  location                      email\n1           1 Orlando Australia                           \n2           2   Keith     India keith0@adventure-works.com\n3           3   Donna   Germany donna0@adventure-works.com\n\n\n\nimport math\nprint(math.sqrt(81))\n\n9.0\n\n\n\n\nloading data into pandas and display first 5 rows:\n\nimport pandas as pd\ndf =  pd.read_csv(\"medals.csv\")\ndf.head()\n\n   Year      City       Sport  ...       Event Event gender   Medal\n0  1924  Chamonix     Skating  ...  individual            M  Silver\n1  1924  Chamonix     Skating  ...  individual            W    Gold\n2  1924  Chamonix     Skating  ...       pairs            X    Gold\n3  1924  Chamonix   Bobsleigh  ...    four-man            M  Bronze\n4  1924  Chamonix  Ice Hockey  ...  ice hockey            M    Gold\n\n[5 rows x 8 columns]\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Some example data to display\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x ** 2)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].set_title('Axis [0, 0]')\naxs[0, 1].plot(x, y, 'tab:orange')\naxs[0, 1].set_title('Axis [0, 1]')\naxs[1, 0].plot(x, -y, 'tab:green')\naxs[1, 0].set_title('Axis [1, 0]')\naxs[1, 1].plot(x, -y, 'tab:red')\naxs[1, 1].set_title('Axis [1, 1]')\n\nfor ax in axs.flat:\n    ax.set(xlabel='x-label', ylabel='y-label')\n\n# Hide x labels and tick labels for top plots and y ticks for right plots.\nfor ax in axs.flat:\n    ax.label_outer()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nInstagram Embed\n\n\n\n::: {style=” display: flex; flex-direction: row; align-items: center;“} ::: {style=”background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;“}\n\n\n::: {style=” background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;“}\n\n::: {style=” background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;“} ::: ::: :::\n\n\n\n\n\n\n\n\n\n::: {style=” color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;“} View this post on Instagram\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {style=” background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;“}\n\n::: {style=” width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)“}\n\n:::\n\n::: {style=” width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);“}\n\n::: {style=” background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);“} :::\n::: {style=” width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);“} ::: ::: :::\n\n::: {style=” background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;“}\n\n::: {style=” background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;“} ::: :::\n\n\nA post shared by allinpython (@allinpython)\n\n:::\n\n\n\n\nSlideshare Embed\n\n\n\n The Power of Gratitude  from INSEAD\n\n\n\nPinterest Embed\n\n\n\n\nTumbler Embed\n\nhttps://sasexplorerwu.tumblr.com/post/682829184961216512/sql-is-a-must-know-for-anyone-working-in-the-data\n\n\n\n\nTableau Embed\nEmbedding Tableau Public Views in iFrame source: https://kb.tableau.com/articles/howto/embedding-tableau-public-views-in-iframes\n\n\n\n\n\nPower BI Embed\nEmbedding Power BI Report in iFrame source:"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts.\n\ninline math: \\(E = mc^{2}\\)\n\n\n\n\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]"
  }
]